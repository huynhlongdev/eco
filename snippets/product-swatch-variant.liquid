{% if block.settings.variant_layout == 'option_full' %}
<div class="select-variant">
  <select name="id" id="productSelect" class="product-single__variants">
    {% for variant in product.variants %}
    <option {% if variant == selected_variant %} selected="selected" {% endif %} value="{{- variant.id -}}">
      {{- variant.title -}}
    </option>
    {% endfor %}
  </select>
</div>

{% elsif block.settings.variant_layout == 'option_type' %}
<div>
  {% unless product.has_only_default_variant %}
  <variant-selector data-url="{{ product.url}}" data-section="{{ section.id }}">
    {% for option in product.options_with_values %}
    <label for="Option-{{ section.id }}-{{ forloop.index0 }}">{{ option.name }}</label>
    <div class="my-2">
      <select name="options[{{ option.name | escape }}]" id="Option-{{ section.id }}-{{ forloop.index0 }}"
        class="w-full border py-3 px-3">
        {% for value in option.values %}
        <option value="{{ value | escape }}" {% if option.selected_value == value %} selected="selected" {% endif %}>
          {{ value }}
        </option>
        {% endfor %}
      </select>
    </div>
    {% endfor %}
  </variant-selector>
  {% endunless %}
</div>

{% else %}
  <div class="swatch-variant">
    {% comment %} {%- if product.variants.size >= 1 -%}
    {% for option in product.options %}
    {%- render 'swatch' with option, block: block, selected_variant: selected_variant -%}
    {% endfor %}
    {%- endif -%} {% endcomment %}
  </div>
{% endif %}


{% unless product.has_only_default_variant %}

  {%- liquid
   assign selected = product.selected_variant 
   assign price_compare = selected.price
   assign price = selected.compare_at_price
   assign available = selected.available
   -%}
 
  <variant-selector data-url="{{ product.url}}" data-section="{{ section.id }}" class="w-100">
    {% for option in product.options_with_values %}
    <div class="swatch clearfix {{ option.name |  downcase -}}" data-layout="format-{{ block.settings.variant_layout }}">
      <label class="block mb-2"><strong>{{ option.name }}:</strong></label>

      <div id="Option-{{ section.id }}-{{ forloop.index0 }}" class="w-100">
        {% for value in option.values %}
        <div class="swatch-element">
          {% comment %} {% assign variant = product.variants | where: "option{{ forloop.index }}", value | first %} {% endcomment %}

          <input type="radio" id="{{ option.name | downcase }}-{{ value | downcase }}"
            name="options[{{ option.name | escape }}]" value="{{ value | escape }}"
            {% if option.selected_value == value %} checked="checked" {% endif %}>
          <label for="{{ option.name | downcase }}-{{ value | downcase }}">
            {{- value -}}
          </label>
        </div>
        {% endfor %}
      </div>

    </div>
    {% endfor %}
  </variant-selector>
{% endunless %}

<script type="text/javascript">

  (function ($) {

  console.log('>>> product', {{ product | json }})

    function onVariantChange(template = "type") {
      let currentVariant;
      if (template == 'full') {
        const currentId = getVariantFull();
        const variantData = getVariantJSON();
        currentVariant = variantData.find(item => item.id == currentId);
      } else {
        const options = getSelectedOptions();
        currentVariant = getSelectedVariant(options);
      }

      console.log('>>>change', currentVariant);

      if (currentVariant) {
        const { id, available } = currentVariant;
        const button = $('.product [type="submit"]');
        if(available){
          button.removeClass('disable')
        }else{
          button.addClass('disable')
        }

        updatePrice(id);
        updateURL(id);
        updateFormID(id);
      }
    }

    function getVariantFull() {
      return $('#productSelect').val();
    }

    function getSelectedVariant(options) {
      const variantData = getVariantJSON();

      const currentVariant = variantData.find(function (variant) {
        const findings = variant.options
          .map(function (option, index) {
            return options[index] === option;
          })
          .every(Boolean);

        return findings ? variant : null;
      });

      // console.log(currentVariant);
      return currentVariant;
    }


    function getSelectedOptions() {
      const options = $('input:checked')
        .map(function () {
          return $(this).val();
        })
        .get();
      // console.log('getSelectedOptions', options);
      return options;
    }


    function getVariantJSON() {
      const variantData = JSON.parse($('#variant-json[type="application/json"]').text());
      return variantData;
    }

    function updateURL(currentVariant) {
      if (!currentVariant) return;
      const url = `${location.origin}${$('[data-url]').data('url')}?variant=${currentVariant}`;
      window.history.replaceState({}, '', url);
    }

    function updateFormID(currentVariant) {
      const formInput = $("input[name='id']");
      formInput.val(currentVariant).attr('value', currentVariant);
    }

    function updatePrice(currentVariant) {
      const sectionId = $('[data-section]').data('section');
      const url = `${$('[data-url]').data('url')}?variant=${currentVariant}&section_id=${sectionId}`;

      $.get(url, function (responseText) {
        const id = `product-price`;
        const html = new DOMParser().parseFromString(responseText, 'text/html');
        const oldPrice = $(`.${id}`);
        const newPrice = $(html).find(`.${id}`);

        if (oldPrice.length && newPrice.length) {
          oldPrice.html(newPrice.html());
        }
      });
    }

    $(document).on('change', '.swatch input:not(.disable)', function () {
      onVariantChange()
    });
    $(document).on('change', '#productSelect', function (e) {
      onVariantChange('full')
    });

  })(jQuery)
</script>